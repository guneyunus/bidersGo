@model bidersGo.Application.Features.Commands.TeacherWorkingWeekCreate.TeacherWorkingWeekCreateCommandResponse

<div class="demo-container">
    <div id="scheduler">

    </div>
    <div class="options">
        <div class="caption">Options</div>
        <div class="options-container">
            <div class="option">
                <div id="allow-adding"></div>
            </div>
            <div class="option">
                <div id="allow-deleting"></div>
            </div>
            <div class="option">
                <div id="allow-updating"></div>
            </div>
            <div class="option">
                <div id="allow-resizing"></div>
            </div>
            <div class="option">
                <div id="allow-dragging"></div>
            </div>
        </div>
    </div>
    
</div>
<div>
    <input type="hidden" id="WorkingTableId" value="@ViewBag.TabloId" />
</div>


@section Scripts
{

    <script type="text/javascript" src="https://cdn3.devexpress.com/jslib/21.2.5/js/dx.all.js"></script>
    <script src="~/vendor/devextreme-aspnet-data/js/dx.aspnet.data.js"></script>

    <script>

        var hiddenId = $("#WorkingTableId");
        var url = "../../../teacher/";
        console.log(hiddenId.val());

        $(() => {
            function showToast(event, value, type) {
                DevExpress.ui.notify(`${event} "${value}" task`, type, 800);
            }

            var scheduler = $('#scheduler').dxScheduler({
                timeZone: 'Europe/Helsinki',
                dataSource:DevExpress.data.AspNet.createStore({
                    key: 'id',
                    loadUrl: `${url}Get/`,
                    insertUrl: `${url}Post/`,
                    updateUrl: `${url}Put/`,
                    deleteUrl: `${url}Delete/`,
                    onBeforeSend(method, ajaxOptions) {
                        ajaxOptions.xhrFields = { withCredentials: true };
                        if (method == "load") {
                            ajaxOptions.url += hiddenId.val();
                        }
                        if (method == "insert") {
                            ajaxOptions.url += hiddenId.val();
                            console.log(ajaxOptions);
                        }
                        if (method == "update") {
                            ajaxOptions.url += hiddenId.val();
                            console.log(ajaxOptions);
                        }
                        if (method == "delete") {
                            console.log(ajaxOptions);
                            /*ajaxOptions.url += key;*/
                        }
                }
                }),
                views: ['week'],
                currentView: 'week',
                currentDate: Date.now(),
                dateSerializationFormat: 'yyyy-MM-ddTHH:mm:ssZ',
                startDayHour: 8,
                endDayHour: 24,
                textExpr: 'Text',
                startDateExpr: 'StartDate',
                endDateExpr: 'EndDate',
                recurrenceRuleExpr: 'RecurrenceRule',
                recurrenceExceptionExpr: 'RecurrenceException',
                descriptionExpr:'Description',
                allDayExpr: 'AllDay',
                editing: {
                    allowAdding: true,
                    allowDeleting: true,
                    allowUpdating: true,
                    allowResizing: true,
                    allowDragging: true,
                },
                onAppointmentDeleted(e) {
                    showToast('Deleted', e.appointmentData.text, 'warning');
                    
                },
                onAppointmentDeleting(e) {
                    showToast('Silmek İstiyor Musunuz', e.appointmentData.text, 'warning');
                    console.log(e);
                },
                height: 600
            }).dxScheduler('instance');

            $('#allow-adding').dxCheckBox({
                text: 'Allow adding',
                value: true,
                onValueChanged(e) {
                    scheduler.option('editing.allowAdding', e.value);
                    console.log(e.value);
                },
            });

            $('#allow-deleting').dxCheckBox({
                text: 'Allow deleting',
                value: true,
                onValueChanged(e) {
                    scheduler.option('editing.allowDeleting', e.value);
                },
            });

            $('#allow-updating').dxCheckBox({
                text: 'Allow updating',
                value: true,
                onValueChanged(e) {
                    scheduler.option('editing.allowUpdating', e.value);
                    dragging.option('disabled', !e.value);
                    resizing.option('disabled', !e.value);
                },
            });

            var resizing = $('#allow-resizing').dxCheckBox({
                text: 'Allow resizing',
                value: true,
                onValueChanged(e) {
                    scheduler.option('editing.allowResizing', e.value);
                },
            }).dxCheckBox('instance');

            var dragging = $('#allow-dragging').dxCheckBox({
                text: 'Allow dragging',
                value: true,
                onValueChanged(e) {
                    scheduler.option('editing.allowDragging', e.value);
                },
            }).dxCheckBox('instance');
        });

       


    </script>
}
